// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fbbench

#include "fbbench_generated.h"
#include "fbbench.grpc.fb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace benchfb {

static const char* FooBarService_method_names[] = {
  "/benchfb.FooBarService/GetFoo",
  "/benchfb.FooBarService/GetBar",
  "/benchfb.FooBarService/GetFooBar",
  "/benchfb.FooBarService/GetFooBarContainer",
};

std::unique_ptr< FooBarService::Stub> FooBarService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FooBarService::Stub> stub(new FooBarService::Stub(channel));
  return stub;
}

FooBarService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel)  , rpcmethod_GetFoo_(FooBarService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBar_(FooBarService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFooBar_(FooBarService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFooBarContainer_(FooBarService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}
  
::grpc::Status FooBarService::Stub::GetFoo(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, flatbuffers::grpc::Message<Foo>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFoo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Foo>>* FooBarService::Stub::AsyncGetFooRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Foo>>::Create(channel_.get(), cq, rpcmethod_GetFoo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Foo>>* FooBarService::Stub::PrepareAsyncGetFooRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Foo>>::Create(channel_.get(), cq, rpcmethod_GetFoo_, context, request, false);
}

::grpc::Status FooBarService::Stub::GetBar(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, flatbuffers::grpc::Message<Bar>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBar_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Bar>>* FooBarService::Stub::AsyncGetBarRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Bar>>::Create(channel_.get(), cq, rpcmethod_GetBar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<Bar>>* FooBarService::Stub::PrepareAsyncGetBarRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<Bar>>::Create(channel_.get(), cq, rpcmethod_GetBar_, context, request, false);
}

::grpc::Status FooBarService::Stub::GetFooBar(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, flatbuffers::grpc::Message<FooBar>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFooBar_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<FooBar>>* FooBarService::Stub::AsyncGetFooBarRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<FooBar>>::Create(channel_.get(), cq, rpcmethod_GetFooBar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<FooBar>>* FooBarService::Stub::PrepareAsyncGetFooBarRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<FooBar>>::Create(channel_.get(), cq, rpcmethod_GetFooBar_, context, request, false);
}

::grpc::Status FooBarService::Stub::GetFooBarContainer(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, flatbuffers::grpc::Message<FooBarContainer>* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFooBarContainer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<FooBarContainer>>* FooBarService::Stub::AsyncGetFooBarContainerRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<FooBarContainer>>::Create(channel_.get(), cq, rpcmethod_GetFooBarContainer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< flatbuffers::grpc::Message<FooBarContainer>>* FooBarService::Stub::PrepareAsyncGetFooBarContainerRaw(::grpc::ClientContext* context, const flatbuffers::grpc::Message<ID>& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< flatbuffers::grpc::Message<FooBarContainer>>::Create(channel_.get(), cq, rpcmethod_GetFooBarContainer_, context, request, false);
}

FooBarService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FooBarService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FooBarService::Service, flatbuffers::grpc::Message<ID>, flatbuffers::grpc::Message<Foo>>(
          std::mem_fn(&FooBarService::Service::GetFoo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FooBarService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FooBarService::Service, flatbuffers::grpc::Message<ID>, flatbuffers::grpc::Message<Bar>>(
          std::mem_fn(&FooBarService::Service::GetBar), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FooBarService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FooBarService::Service, flatbuffers::grpc::Message<ID>, flatbuffers::grpc::Message<FooBar>>(
          std::mem_fn(&FooBarService::Service::GetFooBar), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FooBarService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FooBarService::Service, flatbuffers::grpc::Message<ID>, flatbuffers::grpc::Message<FooBarContainer>>(
          std::mem_fn(&FooBarService::Service::GetFooBarContainer), this)));
}

FooBarService::Service::~Service() {
}

::grpc::Status FooBarService::Service::GetFoo(::grpc::ServerContext* context, const flatbuffers::grpc::Message<ID>* request, flatbuffers::grpc::Message<Foo>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FooBarService::Service::GetBar(::grpc::ServerContext* context, const flatbuffers::grpc::Message<ID>* request, flatbuffers::grpc::Message<Bar>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FooBarService::Service::GetFooBar(::grpc::ServerContext* context, const flatbuffers::grpc::Message<ID>* request, flatbuffers::grpc::Message<FooBar>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FooBarService::Service::GetFooBarContainer(::grpc::ServerContext* context, const flatbuffers::grpc::Message<ID>* request, flatbuffers::grpc::Message<FooBarContainer>* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace benchfb

