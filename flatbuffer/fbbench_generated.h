// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBBENCH_BENCHFB_H_
#define FLATBUFFERS_GENERATED_FBBENCH_BENCHFB_H_

#include "flatbuffers/flatbuffers.h"

namespace benchfb {

struct ID;

struct Foo;

struct Bar;

struct FooBar;

struct FooBarContainer;

enum Enum {
  Enum_Apples = 0,
  Enum_Pears = 1,
  Enum_Bananas = 2,
  Enum_MIN = Enum_Apples,
  Enum_MAX = Enum_Bananas
};

inline const Enum (&EnumValuesEnum())[3] {
  static const Enum values[] = {
    Enum_Apples,
    Enum_Pears,
    Enum_Bananas
  };
  return values;
}

inline const char * const *EnumNamesEnum() {
  static const char * const names[] = {
    "Apples",
    "Pears",
    "Bananas",
    nullptr
  };
  return names;
}

inline const char *EnumNameEnum(Enum e) {
  if (e < Enum_Apples || e > Enum_Bananas) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEnum()[index];
}

struct ID FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct IDBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(ID::VT_ID, id, 0);
  }
  explicit IDBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IDBuilder &operator=(const IDBuilder &);
  flatbuffers::Offset<ID> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ID>(end);
    return o;
  }
};

inline flatbuffers::Offset<ID> CreateID(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0) {
  IDBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

struct Foo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_COUNT = 6,
    VT_PREFIX = 8,
    VT_LENGTH = 10
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  int16_t count() const {
    return GetField<int16_t>(VT_COUNT, 0);
  }
  int8_t prefix() const {
    return GetField<int8_t>(VT_PREFIX, 0);
  }
  uint32_t length() const {
    return GetField<uint32_t>(VT_LENGTH, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyField<int16_t>(verifier, VT_COUNT) &&
           VerifyField<int8_t>(verifier, VT_PREFIX) &&
           VerifyField<uint32_t>(verifier, VT_LENGTH) &&
           verifier.EndTable();
  }
};

struct FooBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(Foo::VT_ID, id, 0);
  }
  void add_count(int16_t count) {
    fbb_.AddElement<int16_t>(Foo::VT_COUNT, count, 0);
  }
  void add_prefix(int8_t prefix) {
    fbb_.AddElement<int8_t>(Foo::VT_PREFIX, prefix, 0);
  }
  void add_length(uint32_t length) {
    fbb_.AddElement<uint32_t>(Foo::VT_LENGTH, length, 0);
  }
  explicit FooBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FooBuilder &operator=(const FooBuilder &);
  flatbuffers::Offset<Foo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Foo>(end);
    return o;
  }
};

inline flatbuffers::Offset<Foo> CreateFoo(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    int16_t count = 0,
    int8_t prefix = 0,
    uint32_t length = 0) {
  FooBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_length(length);
  builder_.add_count(count);
  builder_.add_prefix(prefix);
  return builder_.Finish();
}

struct Bar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PARENT = 4,
    VT_TIME = 6,
    VT_RATIO = 8,
    VT_SIZE = 10
  };
  const Foo *parent() const {
    return GetPointer<const Foo *>(VT_PARENT);
  }
  int32_t time() const {
    return GetField<int32_t>(VT_TIME, 0);
  }
  float ratio() const {
    return GetField<float>(VT_RATIO, 0.0f);
  }
  uint16_t size() const {
    return GetField<uint16_t>(VT_SIZE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PARENT) &&
           verifier.VerifyTable(parent()) &&
           VerifyField<int32_t>(verifier, VT_TIME) &&
           VerifyField<float>(verifier, VT_RATIO) &&
           VerifyField<uint16_t>(verifier, VT_SIZE) &&
           verifier.EndTable();
  }
};

struct BarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_parent(flatbuffers::Offset<Foo> parent) {
    fbb_.AddOffset(Bar::VT_PARENT, parent);
  }
  void add_time(int32_t time) {
    fbb_.AddElement<int32_t>(Bar::VT_TIME, time, 0);
  }
  void add_ratio(float ratio) {
    fbb_.AddElement<float>(Bar::VT_RATIO, ratio, 0.0f);
  }
  void add_size(uint16_t size) {
    fbb_.AddElement<uint16_t>(Bar::VT_SIZE, size, 0);
  }
  explicit BarBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BarBuilder &operator=(const BarBuilder &);
  flatbuffers::Offset<Bar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Bar>(end);
    return o;
  }
};

inline flatbuffers::Offset<Bar> CreateBar(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Foo> parent = 0,
    int32_t time = 0,
    float ratio = 0.0f,
    uint16_t size = 0) {
  BarBuilder builder_(_fbb);
  builder_.add_ratio(ratio);
  builder_.add_time(time);
  builder_.add_parent(parent);
  builder_.add_size(size);
  return builder_.Finish();
}

struct FooBar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIBLING = 4,
    VT_NAME = 6,
    VT_RATING = 8,
    VT_POSTFIX = 10
  };
  const Bar *sibling() const {
    return GetPointer<const Bar *>(VT_SIBLING);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  double rating() const {
    return GetField<double>(VT_RATING, 0.0);
  }
  uint8_t postfix() const {
    return GetField<uint8_t>(VT_POSTFIX, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SIBLING) &&
           verifier.VerifyTable(sibling()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<double>(verifier, VT_RATING) &&
           VerifyField<uint8_t>(verifier, VT_POSTFIX) &&
           verifier.EndTable();
  }
};

struct FooBarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sibling(flatbuffers::Offset<Bar> sibling) {
    fbb_.AddOffset(FooBar::VT_SIBLING, sibling);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FooBar::VT_NAME, name);
  }
  void add_rating(double rating) {
    fbb_.AddElement<double>(FooBar::VT_RATING, rating, 0.0);
  }
  void add_postfix(uint8_t postfix) {
    fbb_.AddElement<uint8_t>(FooBar::VT_POSTFIX, postfix, 0);
  }
  explicit FooBarBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FooBarBuilder &operator=(const FooBarBuilder &);
  flatbuffers::Offset<FooBar> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FooBar>(end);
    return o;
  }
};

inline flatbuffers::Offset<FooBar> CreateFooBar(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Bar> sibling = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    double rating = 0.0,
    uint8_t postfix = 0) {
  FooBarBuilder builder_(_fbb);
  builder_.add_rating(rating);
  builder_.add_name(name);
  builder_.add_sibling(sibling);
  builder_.add_postfix(postfix);
  return builder_.Finish();
}

inline flatbuffers::Offset<FooBar> CreateFooBarDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Bar> sibling = 0,
    const char *name = nullptr,
    double rating = 0.0,
    uint8_t postfix = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return benchfb::CreateFooBar(
      _fbb,
      sibling,
      name__,
      rating,
      postfix);
}

struct FooBarContainer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LIST = 4,
    VT_INITIALIZED = 6,
    VT_FRUIT = 8,
    VT_LOCATION = 10
  };
  const flatbuffers::Vector<flatbuffers::Offset<FooBar>> *list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FooBar>> *>(VT_LIST);
  }
  bool initialized() const {
    return GetField<uint8_t>(VT_INITIALIZED, 0) != 0;
  }
  Enum fruit() const {
    return static_cast<Enum>(GetField<int16_t>(VT_FRUIT, 0));
  }
  const flatbuffers::String *location() const {
    return GetPointer<const flatbuffers::String *>(VT_LOCATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyVector(list()) &&
           verifier.VerifyVectorOfTables(list()) &&
           VerifyField<uint8_t>(verifier, VT_INITIALIZED) &&
           VerifyField<int16_t>(verifier, VT_FRUIT) &&
           VerifyOffset(verifier, VT_LOCATION) &&
           verifier.VerifyString(location()) &&
           verifier.EndTable();
  }
};

struct FooBarContainerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FooBar>>> list) {
    fbb_.AddOffset(FooBarContainer::VT_LIST, list);
  }
  void add_initialized(bool initialized) {
    fbb_.AddElement<uint8_t>(FooBarContainer::VT_INITIALIZED, static_cast<uint8_t>(initialized), 0);
  }
  void add_fruit(Enum fruit) {
    fbb_.AddElement<int16_t>(FooBarContainer::VT_FRUIT, static_cast<int16_t>(fruit), 0);
  }
  void add_location(flatbuffers::Offset<flatbuffers::String> location) {
    fbb_.AddOffset(FooBarContainer::VT_LOCATION, location);
  }
  explicit FooBarContainerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FooBarContainerBuilder &operator=(const FooBarContainerBuilder &);
  flatbuffers::Offset<FooBarContainer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FooBarContainer>(end);
    return o;
  }
};

inline flatbuffers::Offset<FooBarContainer> CreateFooBarContainer(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FooBar>>> list = 0,
    bool initialized = false,
    Enum fruit = Enum_Apples,
    flatbuffers::Offset<flatbuffers::String> location = 0) {
  FooBarContainerBuilder builder_(_fbb);
  builder_.add_location(location);
  builder_.add_list(list);
  builder_.add_fruit(fruit);
  builder_.add_initialized(initialized);
  return builder_.Finish();
}

inline flatbuffers::Offset<FooBarContainer> CreateFooBarContainerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<FooBar>> *list = nullptr,
    bool initialized = false,
    Enum fruit = Enum_Apples,
    const char *location = nullptr) {
  auto list__ = list ? _fbb.CreateVector<flatbuffers::Offset<FooBar>>(*list) : 0;
  auto location__ = location ? _fbb.CreateString(location) : 0;
  return benchfb::CreateFooBarContainer(
      _fbb,
      list__,
      initialized,
      fruit,
      location__);
}

inline const benchfb::FooBarContainer *GetFooBarContainer(const void *buf) {
  return flatbuffers::GetRoot<benchfb::FooBarContainer>(buf);
}

inline const benchfb::FooBarContainer *GetSizePrefixedFooBarContainer(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<benchfb::FooBarContainer>(buf);
}

inline bool VerifyFooBarContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<benchfb::FooBarContainer>(nullptr);
}

inline bool VerifySizePrefixedFooBarContainerBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<benchfb::FooBarContainer>(nullptr);
}

inline void FinishFooBarContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<benchfb::FooBarContainer> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFooBarContainerBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<benchfb::FooBarContainer> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace benchfb

#endif  // FLATBUFFERS_GENERATED_FBBENCH_BENCHFB_H_
